Question – Amazon (2019), Wipro (2023), Accenture (2022), TechMahindra (2022)

Problem Statement:
Merging Two Binary Search Trees
Consider you are tasked with implementing a program in C++ to merge two Binary Search Trees (BSTs) into a single BST. Each BST node contains an integer key and pointers to its left and right child nodes.

Objectives:
Write a C++ class TreeNode to represent a node of a BST.
Implement a C++ class BinarySearchTree to manage operations on the BST, including merging.

Task Details:
1.	TreeNode Class:
Define a class TreeNode representing a node of a Binary Search Tree with the following properties:
•	int key: An integer representing the value/key of the node.
•	TreeNode* left: A pointer to the left child node.
•	TreeNode* right: A pointer to the right child node.

2.	BinarySearchTree Class:
Define a class BinarySearchTree to manage operations on a BST, including merging two BSTs. The class should have the following essential methods:
•	TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2): A method to merge two BSTs root1 and root2 into a single BST. The method should return the root of the merged BST.
•	void insert(int key): A method to insert a new node with the given key into the BST.
•	void inorderTraversal(TreeNode* root): A method to perform an inorder traversal of the BST starting from the given root node (for testing purposes).

Instructions:
•	Implement the mergeTrees method in the BinarySearchTree class to merge two given BSTs root1 and root2 into a single BST. The resulting BST should contain all the nodes from both input BSTs while maintaining the BST properties.
•	Ensure the merged BST is balanced and adheres to the BST properties (left subtree values < current node < right subtree values).
•	Test your implementation by creating instances of BinarySearchTree, inserting nodes into each tree, merging them, and then performing an inorder traversal of the merged tree to validate the correctness of the merge operation.
Note: You may assume that the input BSTs root1 and root2 are valid and do not contain any duplicate nodes.


1) 1st BST
      5
     / \
    3   7

2) 2nd BST
      10
     / \
    8   12
   / \
  6   9


Result:-

      7
     / \
    5   10
   / \  / \
  3   - 8  12
     / \
    6   9

